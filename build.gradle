import org.gradle.api.tasks.wrapper.Wrapper.DistributionType

buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath("com.github.ben-manes:gradle-versions-plugin:$gradleVersionsPluginVersion")
    classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
    classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion")
    classpath("org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion")
  }
}

// Apply build-scan before all other plugins
plugins {
  id 'com.gradle.build-scan' version '2.1'
}

// Use "./gradlew dependencyUpdates -Drevision=release" to check dependencies
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'eclipse'

allprojects {
  version = '0.0.1-SNAPSHOT'
  repositories {
    jcenter()
  }
}

subprojects {
  apply plugin: 'groovy'
  apply plugin: 'kotlin'
  apply plugin: 'io.spring.dependency-management'

  // Java 8 bytecode
  sourceCompatibility = 1.8
  targetCompatibility = 1.8
  compileKotlin {
    kotlinOptions.jvmTarget = '1.8'
  }
  compileTestKotlin {
    kotlinOptions.jvmTarget = '1.8'
  }

  // Kotlin Linting
  configurations {
    ktlint
  }
  task ktlint(type: JavaExec) {
    group = 'verification'
    main = 'com.github.shyiko.ktlint.Main'
    classpath = configurations.ktlint
    args 'src/**/*.kt'
  }
  check.dependsOn ktlint
  task ktlintFormat(type: JavaExec) {
    group = 'verification'
    main = 'com.github.shyiko.ktlint.Main'
    classpath = configurations.ktlint
    args '-F', 'src/**/*.kt'
  }

  dependencies {
    ktlint 'com.github.shyiko:ktlint:0.30.0'

    // Kotlin
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion")
    implementation("org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion")
    implementation("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion")
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion")

    // Spock
    testImplementation("org.codehaus.groovy:groovy-all:$groovyVersion")
    testImplementation("org.spockframework:spock-core:$spockVersion")
    testImplementation("cglib:cglib:$cglibVersion")
  }

  test {
    testLogging {
      exceptionFormat = 'full'
    }
  }

  clean.doFirst {
    delete "$projectDir/out/"
  }
}

tasks.withType(AbstractArchiveTask) {
  preserveFileTimestamps = false
  reproducibleFileOrder = true
}

wrapper {
  distributionType = DistributionType.ALL
  gradleVersion = '5.2.1'
}

buildScan {
  termsOfServiceUrl = 'https://gradle.com/terms-of-service'
  termsOfServiceAgree = 'yes'
  if (System.getenv('TRAVIS_PULL_REQUEST') == 'false') {
    link 'VCS', "https://github.com/timrs2998/myretail/tree/${System.getProperty('vcs.branch')}"
  }
  if (System.getenv('CI')) {
    publishAlways()
  }
}
